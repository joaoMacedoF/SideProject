/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.project.api;

import com.project.model.CreateOrUpdateRoleApiRequestDto;
import com.project.model.ErrorResponseObject;
import org.springframework.data.domain.Pageable;
import com.project.model.RequestDtoPageRoleDto;
import com.project.model.ResponseDtoPageRoleDto;
import com.project.model.ResponseDtoRoleDto;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Api(value = "Role", description = "the Role API")
public interface RoleApi {

    default RoleApiDelegate getDelegate() {
        return new RoleApiDelegate() {};
    }

    /**
     * PUT /roles : createOrUpdateRole
     *
     * @param apiRequest apiRequest (required)
     * @return OK (status code 200)
     *         or Common error (status code 400)
     *         or The user doesn&#39;t have permission to make the operation. (status code 403)
     */
    @ApiOperation(value = "createOrUpdateRole", nickname = "createOrUpdateRoleUsingPUT", notes = "", response = ResponseDtoRoleDto.class, tags={ "Role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseDtoRoleDto.class),
        @ApiResponse(code = 400, message = "Common error", response = ErrorResponseObject.class),
        @ApiResponse(code = 403, message = "The user doesn't have permission to make the operation.", response = ErrorResponseObject.class) })
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/roles",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    default ResponseEntity<ResponseDtoRoleDto> createOrUpdateRoleUsingPUT(@ApiParam(value = "apiRequest", required = true) @Valid @RequestBody CreateOrUpdateRoleApiRequestDto apiRequest) {
        return getDelegate().createOrUpdateRoleUsingPUT(apiRequest);
    }


    /**
     * GET /roles : getRoles
     *
     * @param apiRequest  (optional)
     * @param pageable  (optional)
     * @param unpaged  (optional)
     * @return OK (status code 200)
     *         or Common error (status code 400)
     *         or The user doesn&#39;t have permission to make the operation. (status code 403)
     */
    @ApiOperation(value = "getRoles", nickname = "getRolesUsingGET", notes = "", response = ResponseDtoPageRoleDto.class, tags={ "Role", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK", response = ResponseDtoPageRoleDto.class),
        @ApiResponse(code = 400, message = "Common error", response = ErrorResponseObject.class),
        @ApiResponse(code = 403, message = "The user doesn't have permission to make the operation.", response = ErrorResponseObject.class) })
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/roles",
        produces = { "application/json" }
    )
    default ResponseEntity<ResponseDtoPageRoleDto> getRolesUsingGET(@ApiParam(value = "") @Valid RequestDtoPageRoleDto apiRequest,@ApiParam(value = "") @Valid Pageable pageable,@ApiParam(value = "") @Valid @RequestParam(value = "unpaged", required = false) Boolean unpaged) {
        return getDelegate().getRolesUsingGET(apiRequest, pageable, unpaged);
    }

}
